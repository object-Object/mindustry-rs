// -*- mode: Rust; -*-

use super::ast::*;
use crate::types::{colors::{COLORS, to_double_bits}, ContentType};

grammar;

extern {
    type Error = String;
}

match {
    r#""[^\n"]*""# => STRING,

    r"[^\r\n #\t;]+:" => LABEL,

    "draw",
    "print",
    "printchar",
    "format",
    "drawflush",
    "printflush",
    "getlink",
    "sensor",
    "set",
    "op",
    "select",
    "lookup",
    "packcolor",
    "unpackcolor",
    "noop",
    "wait",
    "stop",
    "end",
    "jump",
    "getblock",
    "setrate",

    "clear",
    "color",
    "col",
    "stroke",
    "line",
    "rect",
    "lineRect",
    "poly",
    "linePoly",
    "triangle",
    "image",
    "translate",
    "scale",
    "rotate",
    "reset",

    "equal",
    "notEqual",
    "lessThan",
    "lessThanEq",
    "greaterThan",
    "greaterThanEq",
    "strictEqual",
    "always",

    "add",
    "sub",
    "mul",
    "div",
    "idiv",
    "mod",
    "emod",
    "pow",

    "land",

    "shl",
    "shr",
    "ushr",
    "or",
    "and",
    "xor",
    "not",

    "max",
    "min",
    "angle",
    "angleDiff",
    "len",
    "noise",
    "abs",
    "sign",
    "log",
    "logn",
    "log10",
    "floor",
    "ceil",
    "round",
    "sqrt",
    "rand",

    "sin",
    "cos",
    "tan",

    "asin",
    "acos",
    "atan",

    "item",
    "block",
    "mech_UNUSED",
    "bullet",
    "liquid",
    "status",
    "unit",
    "weather",
    "effect_UNUSED",
    "sector",
    "loadout_UNUSED",
    "typeid_UNUSED",
    "error",
    "planet",
    "ammo_UNUSED",
    "team",
    "unitCommand",
    "unitStance",

    "ore",
    "building",

    // https://github.com/Anuken/Arc/blob/071fdffaf220cd57cf971a0ee58db2f321f92ee1/arc-core/src/arc/util/Strings.java#L495
    // for example, -+1.--0. is a valid number literal
    r"(?x)
        [+-]?
        (?:
            # decimal
            (?: [+-]?[0-9]+ )?       # integer (optional)
            \. (?: \+?[0-9]+ | -0+ ) # fraction
            |
            # integer or scientific notation
            [+-]?[0-9]+             # integer
            (?: [eE] [+-]?[0-9]+ )? # exponent (optional)
        )
        [fF.]?
    " => NUMBER_DEC,

    r"[+-]?0b[01]+" => NUMBER_BIN,
    r"[+-]?0x[0-9a-fA-F]+" => NUMBER_HEX,

    r"%\[(?:[a-z_]+|[A-Z_]+)\]" => COLOR_NAME,
    r"%(?:[+\-0-9a-fA-F][0-9a-fA-F]){3,4}" => COLOR_HEX,

    r"(?:\r?\n|;)+" => EOL,

    r"[ \t]+" => {}, // whitespace
    r"#[^\n]*" => {}, // comment
} else {
    r"[^\r\n #\t;]+" => SYMBOL,
}

pub Logic: Vec<Statement> =
    EOL* <v:(<Statement> EOL+)*> <e:Statement?> =>
        v.into_iter().chain(e).collect();

Statement: Statement = {
    <l:LABEL> =>
        Statement::Label(l[..l.len() - 1].into()),

    <i:Instruction> <v:Value*> =>
        Statement::Instruction(i, v),
};

Instruction: Instruction = {
    // input/output

    "draw" <op:DrawOp0> =>
        optional_args!(Instruction::Draw { <>; x, y, p1, p2, p3, p4 }),

    "draw" <op:DrawOp1> <x:Value> =>
        optional_args!(Instruction::Draw { <>; y, p1, p2, p3, p4 }),

    "draw" <op:DrawOp2> <x:Value> <y:Value> =>
        optional_args!(Instruction::Draw { <>; p1, p2, p3, p4 }),

    "draw" <op:DrawOp3> <x:Value> <y:Value> <p1:Value> =>
        optional_args!(Instruction::Draw { <>; p2, p3, p4 }),

    "draw" <op:DrawOp4> <x:Value> <y:Value> <p1:Value> <p2:Value> =>
        optional_args!(Instruction::Draw { <>; p3, p4 }),

    "draw" <op:DrawOp5> <x:Value> <y:Value> <p1:Value> <p2:Value> <p3:Value> =>
        optional_args!(Instruction::Draw { <>; p4 }),

    "draw" <op:DrawOp6> <x:Value> <y:Value> <p1:Value> <p2:Value> <p3:Value> <p4:Value> =>
        Instruction::Draw { <> },

    "print" <value:Value> =>
        Instruction::Print { <> },

    "printchar" <value:Value> =>
        Instruction::PrintChar { <> },

    "format" <value:Value> =>
        Instruction::Format { <> },

    // block control

    "drawflush" <target:Value> =>
        Instruction::DrawFlush { <> },

    "printflush" <target:Value> =>
        Instruction::PrintFlush { <> },

    "getlink" <result:Value> <index:Value> =>
        Instruction::GetLink { <> },

    "sensor" <result:Value> <target:Value> <sensor:Value> =>
        Instruction::Sensor { <> },

    // operations

    "set" <to:Value> <from:Value> =>
        Instruction::Set { <> },

    "op" <op:LogicOp1> <result:Value> <x:Value> =>
        optional_args!(Instruction::Op { <>; y }),

    "op" <op:LogicOp2> <result:Value> <x:Value> <y:Value> =>
        Instruction::Op { <> },

    "select" <result:Value> <op:ConditionOp0> <x:Value> <y:Value> <if_true:Value> =>
        optional_args!(Instruction::Select { <>; if_false }),

    "select" <result:Value> <op:ConditionOp2> <x:Value> <y:Value> <if_true:Value> <if_false:Value> =>
        Instruction::Select { <> },

    "lookup" <content_type:ContentType> <result:Value> <id:Value> =>
        Instruction::Lookup { <> },

    "packcolor" <result:Value> <r:Value> <g:Value> <b:Value> <a:Value> =>
        Instruction::PackColor { <> },

    "unpackcolor" <r:Value> <g:Value> <b:Value> <a:Value> <value:Value> =>
        Instruction::UnpackColor { <> },

    // flow control

    "noop" =>
        Instruction::Noop,
    
    "wait" <value:Value> =>
        Instruction::Wait { <> },

    "stop" =>
        Instruction::Stop,

    "end" =>
        Instruction::End,

    "jump" <target:JumpTarget> <op:ConditionOp0> =>
        optional_args!(Instruction::Jump { <>; x, y }),

    "jump" <target:JumpTarget> <op:ConditionOp2> <x:Value> <y:Value> =>
        Instruction::Jump { <> },

    // privileged

    "getblock" <layer:TileLayer> <result:Value> <x:Value> <y:Value> =>
        Instruction::GetBlock { <> },

    "setrate" <value:Value> =>
        Instruction::SetRate { <> },

    // unknown

    <i:SYMBOL> =>
        Instruction::Unknown(i.into()),
};

DrawOp0: DrawOp = {
    "reset" => DrawOp::Reset,
};

DrawOp1: DrawOp = {
    "col"    => DrawOp::Col,
    "stroke" => DrawOp::Stroke,
    "rotate" => DrawOp::Rotate,
};

DrawOp2: DrawOp = {
    "translate" => DrawOp::Translate,
    "scale"     => DrawOp::Scale,
};

DrawOp3: DrawOp = {
    "clear" => DrawOp::Clear,
    "print" => DrawOp::Print,
};

DrawOp4: DrawOp = {
    "color"    => DrawOp::Color,
    "line"     => DrawOp::Line,
    "rect"     => DrawOp::Rect,
    "lineRect" => DrawOp::LineRect,
};

DrawOp5: DrawOp = {
    "poly"     => DrawOp::Poly,
    "linePoly" => DrawOp::LinePoly,
    "image"    => DrawOp::Image,
};

DrawOp6: DrawOp = {
    "triangle" => DrawOp::Triangle,
};

ConditionOp0: ConditionOp = {
    "always" => ConditionOp::Always,
};

ConditionOp2: ConditionOp = {
    "equal"         => ConditionOp::Equal,
    "notEqual"      => ConditionOp::NotEqual,
    "lessThan"      => ConditionOp::LessThan,
    "lessThanEq"    => ConditionOp::LessThanEq,
    "greaterThan"   => ConditionOp::GreaterThan,
    "greaterThanEq" => ConditionOp::GreaterThanEq,
    "strictEqual"   => ConditionOp::StrictEqual,
};

LogicOp1: LogicOp = {
    "not" => LogicOp::Not,

    "abs"   => LogicOp::Abs,
    "sign"  => LogicOp::Sign,
    "log"   => LogicOp::Log,
    "log10" => LogicOp::Log10,
    "floor" => LogicOp::Floor,
    "ceil"  => LogicOp::Ceil,
    "round" => LogicOp::Round,
    "sqrt"  => LogicOp::Sqrt,
    "rand"  => LogicOp::Rand,

    "sin" => LogicOp::Sin,
    "cos" => LogicOp::Cos,
    "tan" => LogicOp::Tan,

    "asin" => LogicOp::Asin,
    "acos" => LogicOp::Acos,
    "atan" => LogicOp::Atan,
};

LogicOp2: LogicOp = {
    "add"  => LogicOp::Add,
    "sub"  => LogicOp::Sub,
    "mul"  => LogicOp::Mul,
    "div"  => LogicOp::Div,
    "idiv" => LogicOp::Idiv,
    "mod"  => LogicOp::Mod,
    "emod" => LogicOp::Emod,
    "pow"  => LogicOp::Pow,

    "land"       => LogicOp::Land,
    ConditionOp2 => LogicOp::Condition(<>),

    "shl"  => LogicOp::Shl,
    "shr"  => LogicOp::Shr,
    "ushr" => LogicOp::Ushr,
    "or"   => LogicOp::Or,
    "and"  => LogicOp::And,
    "xor"  => LogicOp::Xor,

    "max"       => LogicOp::Max,
    "min"       => LogicOp::Min,
    "angle"     => LogicOp::Angle,
    "angleDiff" => LogicOp::AngleDiff,
    "len"       => LogicOp::Len,
    "noise"     => LogicOp::Noise,
    "logn"      => LogicOp::Logn,
};

ContentType: ContentType = {
    "item"           => ContentType::Item,
    "block"          => ContentType::Block,
    "mech_UNUSED"    => ContentType::Mech,
    "bullet"         => ContentType::Bullet,
    "liquid"         => ContentType::Liquid,
    "status"         => ContentType::Status,
    "unit"           => ContentType::Unit,
    "weather"        => ContentType::Weather,
    "effect_UNUSED"  => ContentType::Effect,
    "sector"         => ContentType::Sector,
    "loadout_UNUSED" => ContentType::Loadout,
    "typeid_UNUSED"  => ContentType::TypeID,
    "error"          => ContentType::Error,
    "planet"         => ContentType::Planet,
    "ammo_UNUSED"    => ContentType::Ammo,
    "team"           => ContentType::Team,
    "unitCommand"    => ContentType::UnitCommand,
    "unitStance"     => ContentType::UnitStance,
};

TileLayer: TileLayer = {
    "floor"    => TileLayer::Floor,
    "ore"      => TileLayer::Ore,
    "block"    => TileLayer::Block,
    "building" => TileLayer::Building,
};

Value: Value = {
    <s:STRING> =>
        Value::String(s[1..s.len() - 1].replace(r"\n", "\n")),

    <n:NUMBER_DEC> =>
        number_to_value(n, parse_number(n)),

    // FIXME: this doesn't actually match how mindustry treats large numbers
    <n:NUMBER_BIN> =>
        number_to_value(n, i64::from_str_radix(&n.replace("0b", ""), 2)),

    <n:NUMBER_HEX> =>
        number_to_value(n, i64::from_str_radix(&n.replace("0x", ""), 16)),

    <c:COLOR_NAME> =>
        number_to_value(c, COLORS.get(&c[2..c.len() - 1]).cloned().ok_or("")),

    <c:COLOR_HEX> => {
        Value::Number(to_double_bits(
            i32::from_str_radix(&c[1..3], 16).unwrap(),
            i32::from_str_radix(&c[3..5], 16).unwrap(),
            i32::from_str_radix(&c[5..7], 16).unwrap(),
            if c.len() == 9 {
                i32::from_str_radix(&c[7..9], 16).unwrap()
            } else {
                0xff
            },
        ))
    },

    <v:Symbol> =>
        Value::Variable(v.into()),
};

// strings are not legal label names
JumpTarget: Value = {
    <n:NUMBER_DEC> =>
        number_to_value(n, parse_number(n)),

    <n:NUMBER_BIN> =>
        Value::Variable(n.into()),

    <n:NUMBER_HEX> =>
        Value::Variable(n.into()),

    <c:COLOR_NAME> =>
        Value::Variable(c.into()),

    <c:COLOR_HEX> =>
        Value::Variable(c.into()),

    <v:Symbol> =>
        Value::Variable(v.into()),
};

Symbol = {
    SYMBOL,
    LABEL,

    "draw",
    "print",
    "printchar",
    "format",
    "drawflush",
    "printflush",
    "getlink",
    "sensor",
    "set",
    "op",
    "select",
    "lookup",
    "packcolor",
    "unpackcolor",
    "noop",
    "wait",
    "stop",
    "end",
    "jump",
    "getblock",
    "setrate",

    "clear",
    "color",
    "col",
    "stroke",
    "line",
    "rect",
    "lineRect",
    "poly",
    "linePoly",
    "triangle",
    "image",
    "translate",
    "scale",
    "rotate",
    "reset",

    "equal",
    "notEqual",
    "lessThan",
    "lessThanEq",
    "greaterThan",
    "greaterThanEq",
    "strictEqual",
    "always",

    "add",
    "sub",
    "mul",
    "div",
    "idiv",
    "mod",
    "emod",
    "pow",

    "land",

    "shl",
    "shr",
    "ushr",
    "or",
    "and",
    "xor",
    "not",

    "max",
    "min",
    "angle",
    "angleDiff",
    "len",
    "noise",
    "abs",
    "sign",
    "log",
    "logn",
    "log10",
    "floor",
    "ceil",
    "round",
    "sqrt",
    "rand",

    "sin",
    "cos",
    "tan",

    "asin",
    "acos",
    "atan",

    "item",
    "block",
    "mech_UNUSED",
    "bullet",
    "liquid",
    "status",
    "unit",
    "weather",
    "effect_UNUSED",
    "sector",
    "loadout_UNUSED",
    "typeid_UNUSED",
    "error",
    "planet",
    "ammo_UNUSED",
    "team",
    "unitCommand",
    "unitStance",

    "ore",
    "building",
};
